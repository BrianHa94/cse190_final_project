Name: Brian Ha
PID: A10710077

In this final project I chose to implement a robot rescue mission. I used PA3 as base code for this project since A* and MDP are key algorithms in my simulation and I also required image_util to generate a video of the rescue mission. My robot.py code takes in specifications from configuration.json and outputs a video in the saved_video folder. The video displays a visual representation of the rescue mission and shows where the robot moved around the dynamically changing room. In this scenario, the rescue robot is very robust and always moves in the direction that it wants to with 100% accuracy. The robot also hacked into the enemy's system and is able to read the layout of the room, even when it changes. Three people have been captured as hostages and are kept in the left-most column of the room. The robot must move through the room without falling into pits and carry the hostages into the safe-zone, which is the right-most column of the room. It uses A* to get to the first hostage but then has to repeatedly use MDP once the enemy's defense systems activate and the room begins to dynamically change. To simulate a dynamically changing room, I used randomness to determine how/if each wall will shift and also to create new pits in the room. The walls cannot shift into the left or right most columns of the rooms, since they are safe zones for the robot, nor can they shift into the robot. Likewise, pits cannot appear in safe zones or suddenly beneath the robot where the robot is located at the time. To successfully resuce the hostages the robot must re-plan using these algorithms. Once the robot has sucessfully rescued the three hostages, the simulation will end and the video will be generated. The simulation will also end if the robot is truly trapped (due to pits) or if the robot has taken too long to rescue the hostages. The steps that the robot takes is outputted in terminal while everything else can be seen in the video. The level of difficulty of the mission can be changed by modifying different parameters in configuration.json (e.g. walls, pits, wallFreq, pitFreq, etc.).
